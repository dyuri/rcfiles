from libqtile.config import Key, Screen, Group, Drag, Click, Match
from libqtile.command import lazy
from libqtile import layout, bar, widget, hook

from launcher import Launcher
from plasma import Plasma

def app_or_group(group, app):
    """ Go to specified group if it exists. Otherwise, run the specified app.
    When used in conjunction with dgroups to auto-assign apps to specific
    groups, this can be used as a way to go to an app if it is already
    running. """
    def f(qtile):
        try:
            qtile.groupMap[group].cmd_toscreen()
        except KeyError:
            qtile.cmd_spawn(app)
    return f


def getIndex(currentGroupName):
    for i in range(len(groups)):
        if groups[i].name == currentGroupName:
            return i


def toPrevGroup(qtile):
    currentGroup = qtile.currentGroup.name
    i = getIndex(currentGroup)
    qtile.currentWindow.togroup(groups[(i - 1) % len(groups)].name)


def toNextGroup(qtile):
    currentGroup = qtile.currentGroup.name
    i = getIndex(currentGroup)
    qtile.currentWindow.togroup(groups[(i + 1) % len(groups)].name)


mod = "mod4"
alt = "mod1"

keys = [
    Key(
        [mod, "control"], "r",
        lazy.restart()
    ),
    Key(
        [mod, "control"], "q",
        lazy.shutdown()
    ),
    Key(
        [mod], "w",
        lazy.window.kill()
    ),
    Key(
        [alt], "Tab",
        lazy.group.next_window()
    ),
    Key(
        [mod], "Tab",
        lazy.group.next_window()
    ),
    Key(
        [alt, "shift"], "Tab",
        lazy.group.prev_window()
    ),
    Key(
        [mod, "shift"], "Tab",
        lazy.group.prev_window()
    ),
    # this is usefull when floating windows get buried
    Key(
        [mod], "grave",
        lazy.window.bring_to_front()
    ),
    # group switch
    Key( #
        [mod], "Left",
        lazy.screen.prev_group()
    ),
    Key( #
        [mod], "Right",
        lazy.screen.next_group()
    ),
    Key(
        [mod, "shift"], "Left",
        lazy.function(toPrevGroup)
    ),
    Key(
        [mod, "shift"], "Right",
        lazy.function(toNextGroup)
    ),
    Key(
        [mod, alt], "Left",
        lazy.prev_screen()
    ),
    Key(
        [mod, alt], "Right",
        lazy.next_screen()
    ),
    # layouts
    Key(
        [mod, alt], "m",
        lazy.group.setlayout('max')
    ),
    Key(
        [mod, alt], "s",
        lazy.group.setlayout('stack')
    ),
    Key(
        [mod, alt], "t",
        lazy.group.setlayout('tile')
    ),
    Key(
        [mod], "space",
        lazy.next_layout()
    ),
    # Bindings to control the layouts
    Key(
        [mod], "h",
        lazy.layout.previous()
    ),
    Key(
        [mod], "l",
        lazy.layout.next()
    ),
    Key(
        [mod], "k",
        lazy.layout.up()
    ),
    Key(
        [mod], "j",
        lazy.layout.down()
    ),
    Key(
        [mod], "f",
        lazy.window.toggle_floating()
    ),
    Key(
        [mod, "shift"], "f",
        lazy.window.toggle_fullscreen()
    ),
    # These are unique to stack layout
    Key(
        [mod, "shift"], "k",
        lazy.layout.client_to_next()
    ),
    Key(
        [mod, "shift"], "j",
        lazy.layout.client_to_previous()
    ),
    Key(
        [mod, "shift"], "Return",
        lazy.layout.toggle_split()
    ),
    # Multiple function keys
    Key(
        [mod], "BackSpace",
        lazy.layout.rotate(),
    ),
    Key(
        [mod, "shift"], "k",
        lazy.layout.shuffle_up(),         # Stack, xmonad-tall
    ),
    Key(
        [mod, "shift"], "j",
        lazy.layout.shuffle_down(),       # Stack, xmonad-tall
    ),
    Key(
        [mod, "control"], "l",
        lazy.layout.add(),                # Stack
        lazy.layout.increase_ratio(),     # Tile
        lazy.layout.maximize(),           # xmonad-tall
    ),
    Key(
        [mod, "control"], "h",
        lazy.layout.delete(),             # Stack
        lazy.layout.decrease_ratio(),     # Tile
        lazy.layout.normalize(),          # xmonad-tall
    ),
    Key(
        [mod, "control"], "k",
        lazy.layout.shrink(),             # xmonad-tall
        lazy.layout.decrease_nmaster(),   # Tile
    ),
    Key(
        [mod, "control"], "j",
        lazy.layout.grow(),               # xmonad-tall
        lazy.layout.increase_nmaster(),   # Tile
    ),
    # applications
    Key(
        [alt], "Escape",
        lazy.spawn("rofi -show window")
    ),
    Key(
        [mod], "Escape",
        lazy.spawn("rofi -show run")
    ),
    Key(
        [mod], "Return",
        lazy.spawn(
            "termite"
            # "/usr/bin/urxvt"
            # " -fn 'xft:MesloLGS\ Nerd\ Font:pixelsize=13:antialias=true:hinting=true'"
            # " -fb 'xft:MesloLGS\ Nerd\ Font:bold:pixelsize=13:antialias=true:hinting=true'"
        )
    ),
    Key(
        [mod], "p",
        lazy.function(app_or_group('io', 'gajim'))
    ),
    Key(
        [mod], "g",
        lazy.function(app_or_group('gimp', 'gimp'))
    ),
    Key(
        [mod], "c",
        lazy.function(app_or_group('www', 'google-chrome'))
    ),
    Key(
        [mod, "shift"], "c",
        lazy.spawn('google-chrome')
    ),
]

keys_default = [
    # Toggle between split and unsplit sides of stack.
    # Split = all windows displayed
    # Unsplit = 1 window displayed, like Max layout, but still with
    # multiple stack panes
    Key(
        [mod, "shift"], "Return",
        lazy.layout.toggle_split()
    ),
]

groups = [Group(str(i)) for i in range(10)]

for i in groups:
    # mod1 + letter of group = switch to group
    keys.append(
        Key([mod], i.name, lazy.group[i.name].toscreen())
    )

    # mod1 + shift + letter of group = switch to & move focused window to group
    keys.append(
        Key([mod, "shift"], i.name, lazy.window.togroup(i.name))
    )

groups.extend([
    Group('www', layout='tile', persist=False, init=False, screen_affinity=0,
          matches=[Match(wm_class=[
              'google-chrome',
              'google-chrome-unstable',
              'Google-chrome'])]),
    Group('ff', layout='tile', persist=False, init=False, screen_affinity=0,
          matches=[Match(wm_class=[
              'Firefox'])]),
    Group('skype', layout='tile', persist=False, init=False,
          matches=[Match(wm_class=['Skype', 'skype'])]),
    Group('steam', layout='max', persist=False, init=False, screen_affinity=0,
          matches=[Match(wm_class=['Steam', 'steam'])]),
    Group('io', layout='max', persist=False,
          matches=[Match(wm_class=['Gajim'], role=['roster'])], init=False, screen_affinity=0),
    Group('gimp', layout='max', persist=False, screen_affinity=0,
          matches=[Match(wm_class=['gimp', 'Gimp'])], init=False),
])

border = dict(
    border_focus='#008080',
    border_normal='#808080',
    border_width=1,
    margin=10,
)

layouts = [
    Plasma(**border),
    layout.Bsp(**border),
    layout.Tile(**border),
    layout.Max(),
    # layout.VerticalTile(**border),
    # layout.Stack(num_stacks=2, **border),

    # gajim
    # layout.Slice(side='left', width=320, name='gajim', role='roster',
    #             fallback=layout.RatioTile(**border)),

    # gimp
    # layout.Slice(side='left', width=256, name='gimp', role='gimp-toolbox',
    #             fallback=layout.Slice(
    #                                   side='right',
    #                                   width=256,
    #                                   role='gimp-dock',
    #             fallback=layout.Stack(num_stacks=1, **border))),
]

widget_defaults = dict(
    font='Inconsolata-g',
    fontsize=14,
    padding=3,
)

screens = [
    Screen(
        top=bar.Bar([
            widget.WindowName(),
            widget.CurrentLayout(),
            widget.CPUGraph(
                graph_color='18EB18',
                fill_color='16EB16.3',
                line_width=1),
            widget.NetGraph(
                graph_color='18BAEB',
                fill_color='1667EB.3',
                line_width=1),
            widget.MemoryGraph(
                graph_color='EBE618',
                fill_color='EBE616.3',
                line_width=1),
            # widget.SwapGraph(
            #    graph_color='EB1818',
            #    fill_color='EB1616.3',
            #    line_width=1),
        ], 24, ),
        bottom=bar.Bar([
            widget.GroupBox(urgent_alert_method='text'),
            Launcher('google-chrome', 'C', foreground='#22FF00'),
            Launcher('firefox', 'F', foreground='#2288FF'),
            widget.Spacer(),
            widget.Notify(foreground="ffff44"),
            widget.Systray(),
            # widget.Volume(**widget_defaults),
            widget.Clock(
                format='%Y.%m.%d %H:%M:%S'),
        ], 30, ),
    ),
    Screen(
        top=bar.Bar(
            [
                widget.WindowName(),
                widget.CurrentLayout(),
            ],
            24,
        ),
        bottom=bar.Bar([
            widget.GroupBox(urgent_alert_method='text'),
            widget.Spacer(),
            widget.Clock(format='%Y.%m.%d %H:%M:%S'),
            ],
            30,
        ),
    ),
]

# Drag floating layouts.
mouse = [
    Drag([mod], "Button1", lazy.window.set_position_floating(),
         start=lazy.window.get_position()),
    Drag([mod], "Button2", lazy.window.set_size_floating(),
         start=lazy.window.get_size()),
    Click([mod], "Button3", lazy.window.bring_to_front())
]


@hook.subscribe.client_new
def dialogs(window):
    if(window.window.get_wm_type() == 'dialog'
       or window.window.get_wm_transient_for()
       or not window.window.get_wm_class()
       or 'gmrun' in window.window.get_wm_class()
       or 'emulator64-arm' in window.window.get_wm_class()):
        window.floating = True

dgroups_key_binder = None
dgroups_app_rules = []
main = None
follow_mouse_focus = True
bring_front_click = False
cursor_warp = False
floating_layout = layout.Floating(**border)
auto_fullscreen = True

wmname = "LG3D"
